📚 1. MỤC ĐÍCH DỰ ÁN
Dự án này là một trò chơi 2D đơn giản, được xây dựng dựa trên nguyên tắc Lập trình Hướng Đối Tượng (OOP). Nó bao gồm nhiều lớp (class) và thư mục đại diện cho từng phần chức năng cụ thể như giao diện người dùng, quản lý trạng thái trò chơi, điều khiển, hiệu ứng, đối tượng trò chơi. Dự án tập trung vào các tính chất Kế thừa, Đa hình, Trừu tượng và Đóng gói để đảm bảo mã nguồn rõ ràng, dễ bảo trì và mở rộng.

🗂️ 2. CẤU TRÚC DỰ ÁN
📁 Control
Button (Abstract Class): Đại diện cho nút bấm chung với các trạng thái (NONE, PRESSED, HOVER) và phương thức trừu tượng isInButton() và draw().
RectangleButton (Concrete Class): Kế thừa từ Button, xác định vùng nhấn và cách vẽ nút bấm hình chữ nhật.
➡️ Mối quan hệ: RectangleButton kế thừa từ Button và định nghĩa chi tiết cách vẽ nút.

📁 Effect
FrameImage (Concrete Class): Đại diện cho một khung hình ảnh.
Animation (Concrete Class): Quản lý chuỗi khung hình để tạo hiệu ứng động.
CacheDataLoader (Singleton Class): Quản lý và tải dữ liệu như hình ảnh, âm thanh, và hoạt ảnh.
➡️ Mối quan hệ: Animation sử dụng FrameImage. CacheDataLoader quản lý tài nguyên cho cả hai lớp.

📁 State
State (Abstract Class): Đại diện cho trạng thái chung của trò chơi.
MenuState (Concrete Class): Trạng thái menu chính với các tùy chọn bắt đầu hoặc thoát game.
GameWorldState (Concrete Class): Trạng thái chơi game chính, quản lý logic và hiển thị trò chơi.
➡️ Mối quan hệ: MenuState và GameWorldState kế thừa từ State.

📁 UserInterface
GameFrame (Concrete Class): Cửa sổ chính của trò chơi (kế thừa từ JFrame).
GamePanel (Concrete Class): Giao diện vẽ và vòng lặp trò chơi (Runnable, KeyListener).
InputManager (Concrete Class): Xử lý sự kiện bàn phím và chuyển tiếp đến State.
➡️ Mối quan hệ: GameFrame chứa GamePanel. GamePanel sử dụng InputManager để xử lý đầu vào.

📁 GameObject
Cấu trúc chính:
GameObject (Abstract Class): Đại diện cho mọi đối tượng trong game.
ParticularObject (Abstract Class): Đối tượng đặc biệt có thể tấn công và bị tấn công.
Human (Abstract Class): Đối tượng người chơi và kẻ địch có thể di chuyển và hành động.
Đối tượng người chơi:
MegaMan (Concrete Class): Nhân vật chính, có thể chạy, nhảy, bắn đạn BlueFire.
Đối tượng kẻ địch:
RedEyeDevil, RobotR, SmallRedGun: Kẻ địch với hành vi và đạn bắn khác nhau (RedEyeBullet, RobotRBullet, YellowFlowerBullet).
FinalBoss: Trùm cuối với nhiều trạng thái tấn công phức tạp.
Quản lý đối tượng:
ParticularObjectManager (Concrete Class): Quản lý danh sách các đối tượng đặc biệt.
BulletManager (Concrete Class): Quản lý danh sách các viên đạn.
Bản đồ và môi trường:
BackgroundMap (Concrete Class): Hiển thị nền của bản đồ.
PhysicalMap (Concrete Class): Quản lý va chạm với địa hình.
Camera (Concrete Class): Điều chỉnh khung nhìn theo nhân vật chính.
➡️ Mối quan hệ:

MegaMan, RedEyeDevil, RobotR kế thừa từ Human và ParticularObject.
Các đối tượng sử dụng BulletManager để quản lý đạn bắn ra.
PhysicalMap xử lý va chạm môi trường.
⚙️ 3. PHÂN TÍCH CÁC TÍNH CHẤT OOP
✅ Kế thừa (Inheritance)
RectangleButton kế thừa từ Button.
MegaMan, FinalBoss, RedEyeDevil kế thừa từ Human.
Bullet là lớp cha của các loại đạn như BlueFire, RedEyeBullet, RobotRBullet.
State là lớp cha của MenuState và GameWorldState.
📌 Ý nghĩa: Cho phép tái sử dụng mã, dễ dàng mở rộng và bảo trì.

✅ Đa hình (Polymorphism)
Phương thức Update() và draw() được override trong nhiều lớp (MegaMan, RedEyeDevil, State).
Phương thức attack() được triển khai khác nhau trong mỗi kẻ địch.
📌 Ý nghĩa: Cho phép cùng một phương thức hoạt động khác nhau tùy vào lớp con.

✅ Trừu tượng (Abstraction)
State, GameObject, Button, ParticularObject là các lớp trừu tượng.
Các phương thức trừu tượng như Update(), draw() buộc lớp con phải hiện thực.
📌 Ý nghĩa: Che giấu chi tiết cài đặt và tập trung vào hành vi cốt lõi.

✅ Đóng gói (Encapsulation)
Các thuộc tính như posX, posY, speedX, speedY trong ParticularObject được khai báo protected hoặc private.
Dữ liệu được truy cập thông qua các phương thức getter và setter.
📌 Ý nghĩa: Bảo vệ dữ liệu và giảm thiểu rủi ro lỗi do truy cập trực tiếp.

🌟 4. ĐIỂM NỔI BẬT CỦA DỰ ÁN
Thiết kế linh hoạt: Phân chia rõ ràng từng phần chức năng (UI, Game State, Game Object).
Quản lý tài nguyên hiệu quả: Dùng CacheDataLoader để tải và tái sử dụng tài nguyên.
Quản lý trạng thái rõ ràng: State quản lý chuyển đổi giữa MenuState, GameWorldState.
Hiệu ứng sinh động: Animation và FrameImage giúp hiển thị nhân vật và kẻ địch sống động.
Dễ dàng mở rộng: Có thể thêm loại đạn, kẻ địch hoặc trạng thái trò chơi mới mà không cần chỉnh sửa nhiều.
📈 5. KẾT LUẬN
Dự án áp dụng đầy đủ 4 tính chất OOP: Kế thừa, Đa hình, Trừu tượng, Đóng gói.
Cấu trúc thư mục rõ ràng, mỗi class đảm nhận một chức năng cụ thể.
Dễ bảo trì và mở rộng: Mở rộng tính năng mới mà không làm hỏng hệ thống cũ.
